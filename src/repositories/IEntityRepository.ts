import { Entity } from "../entities/Entity";


export type ExcludeArrayFields<T> = {
  [P in keyof T as T[P] extends unknown[] ? never : P]: T[P] extends Record<string, unknown> ? ExcludeArrayFields<T[P]> : T[P];
};
export type ExcludeAutoGeneratedFields<T extends Entity> = Omit<T, 'id' | 'createdAt' | 'updatedAt'>
export type CreateEntity<T extends Entity> = ExcludeArrayFields<ExcludeAutoGeneratedFields<T>>;
export type UpdateEntity<T extends Entity> = Partial<CreateEntity<T>>;
export type Filters<T extends Entity> = {
  [P in keyof T]?: T[P][];
}
export interface Pagination {
  limit: number;
  offset: number;
}
type FirstLeverPropsSortable<T extends Entity> = {
  [P in keyof T]: T[P] extends string | number | Date | boolean ? P : never;
}[keyof T];
interface Sorting<T extends Entity> {
  fieldName: keyof FirstLeverPropsSortable<T>;
  order: 'asc' | 'desc';
}
export type SortingList<T extends Entity> = Sorting<T>[];

export interface IEntityRepository<T extends Entity> {
  findById(id: T['id']): Promise<T | null>;
  create(entity: CreateEntity<T>): Promise<void>;
  delete(id: T['id']): Promise<void>;
  update(id: T['id'], entity: UpdateEntity<T>): Promise<void>;
  findAll(
    filter: Filters<T>,
    pagination: Pagination,
    sorting: SortingList<T>
  ): Promise<T[]>;
}